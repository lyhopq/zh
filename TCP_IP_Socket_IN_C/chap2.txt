
+ 基本 TCP Socket +[chap2-basic]

现在是你学习 如何写自己的套接字应用程序的时候了。我们将从YCP开始。现在你或许已经做好了直接写一些实际的代码的时候了，因此我们开始进行一个TCP客户端和服务器的工作实例。然后我们呈现在基本TCP中使用的套接字API的细节。为了使事情变得简单，我们最初的代码使用一个特定的IP版本：IPv4，它现在，在很大程度上，仍然在网际协议中占主导地位。在本章的结尾部分，我们讲呈现客户端和服务器的IPv6改进版本。在[第三章 #chap3]我们将要示范创建与协议无关的应用程序。

我们的客户端和服务器例子执行 //echo// 协议。它的工作原理如下：客户端连接到服务器病发送它的数据。服务器简单的回显他所收到的信息到客户端并断开连接。在我们的应用程序中，客户端发送的数据是一个作为提供给命令行参数的字符串。我们的客户端将打印它从服务器收到的数据，这样我们就能看见传回来的是什么东西。许多系统都有一个回显服务来进行调试和测试。

++ IPv4 TCP 客户端 ++[v4_TCP_client]

客户端和服务器之间的区别是非常重要的，因为它们在通信中使用套接字接口的某些步骤不一样。我们首先关注客户端。它的工作就是初始与服务器的通信，服务器被动的等待连接。

典型的TCP客户端通信涉及四个基本步骤：
+ 使用 ``socket()`` 创造一个TCP套接字。
+ 使用 ``connect()`` 与服务器建立连接。
+ 使用 ``send()`` 和 ``recv()`` 通信。
+ 使用 ``close()`` 关闭连接。


``TCPEchoClient4.c`` 是IPv4的TCP回显客户端的实现。

**TCPEchoClient4.c**
----------------------------
%!include: ``code/chap1/TCPEchoClient4.c``

我们的 ``TCPEchoClient4.c`` 做以下事情：

+ **程序建立和参数分析**：1-21行
 - **包含文件**：1-9行
 : 
这些头文件定义了API的标准的函数和常量。查阅你的文档（例如：man手册）的适当头文件找到你系统的套接字函数和数据结构。我们使用我们自己的包含文件：``Practical.h``，有我们自己的函数原型，将在下面描述。

 - **典型的参数分析和完整性检查**：13-21行
 : 
 IPv4地址和回显的字符串作为前两个参数被传递进来。可选择的，客户端把第三个参数作为服务器的端口。如果没有端口参数提供，客户端使用众所周知的回显协议端口：7。
+ **TCP套接字创建**：23-26行
 : 
 我们使用``socket()``函数来创建一个套接字。该套接字对应的是IPv4（AF_INET)，使用叫做TCP（IPPORT_TCP）的流式协议（SOCK_STREAM）。如果成功，``socket()``返回一个整形描述符或“句柄”。如果失败，将返回-1，此时我们调用我们的错误处理函数：``DieWithSystemMessage()``（在后面描述），来打印一个消息来示意并且退出。

+ **准备地址和建立连接**：28-42行
 - **准备sockaddr_in结构体来保存服务器地址**：29-30行
 : 
 连接到一个套接字，我们必须指定连接到的地址和端口。**sockaddr_in**结构体被定义为这些信息的“容器”。调用函数``memset()``的作用是确保我们不需要该结构体中的任何部分都被置零。
 - **填充sockaddr_in**：31-38行
 : 
 我们必须设置地址族（AF_INET），网络地址和端口号。函数``inet_pton()``把服务器的网络地址（作为命令行参数传递了的四点分记法）的字符表示法转换为32位二进制表示法。服务器的端口号在早先已经从命令行字符串转换到了二进制；调用函数``htons()``（"hosttonetworkshort"）确保二进制值格式化为API所需要的。（为什么这样做将在[第五章 #chap5]描述。）
 - **连接**：40-42行

