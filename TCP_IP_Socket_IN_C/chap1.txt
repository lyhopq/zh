
+ 第一章 简介 +[chap1]

当今，人们使用计算机来打电话、看电视、给朋友发即时消息、与别人一起玩游戏而且可以购买你可以想象到的任何东西，无论是歌曲还是汽车--automobiles--。应用程序和互联网的通信能力使得这些成为可能。虽然 不能说现在有多少计算机能够连接到因特网，但是我们可以肯定这一数字将会增加很快；不需要多久就会到达数十亿。而且，新的应用程序与日俱增。随着渐增的带宽和访问--access--，在可预见的未来因特网的影响力讲持续增加。

一个应用程序如何与其它程序通信呢？本书的目的就是把你带到了解这个问题的道路上来，并且以//C//语言为背景。在很长的一段时间里，//C//语言被用来实现网络通信软件。确实，被称作 //Socket// 的应用程序接口(API)就是首先从//C//中发展来的。

在我们探究--delve--sockets的细节之前，去看一下网络和协议的一张大图是值得的，让我们看清我们的代码在那些地方适用。在这我们的目的不是教你网络和TCP/IP是如何工作的，而是介绍一些基本的知识和技术。

++ 网络、包和协议 ++[net_pac_pro]

一个计算机网络是由通过信道互联的机器组成。我们把这些机器叫做 //hosts// 和 //routers//。主机(Hosts)就是那些运行应用程序的计算机，例如：你的浏览器、IM客户端，或者一个文件共享程序。这些运行在主机上的应用程序是网络的真正使用者。路由器(Routers)(也被叫做网关)是那些把信息从一个信道中继或转交给其它信道的机器。它们可能运行程序，担不是应用程序。对我们来说，//通信信道//是一种把字节流从一个主机传送到另一个主机的受
手段；它可能是有线的(如：Ethernet)，无线的(如：WiFi)，或者是其它的连接。

路由是非常重要的，因为它不是实际上把每个主机都连接到其它主机上，而是通过把一些主机连接到一个路由，这个路由又连接到其它路由，如此下去就形成了一个网络。这一安排使得每个机器都经过相对较少的通信信道；大多数的主机只需要一个。然而，程序间通过网络交换信息不需要直接与路由交互，而且一般也不知道路由的存在。

我们所说的//信息//是指连续的字节，它们被程序构造和解析。在计算机网络环境下，这些字节流一般被叫做//包//。一个数据包包含控制信息，网络用户使用它们来进行工作，而且有时还包括用户数据。一个例子就是确认包地址的信息，路由使用这一控制信息来确定如何转发每个包。

一个//协议//就是关于通信程序间数据包交换协议和它们的含义。协议既规定数据包如何构造，例如：目的信息在包的那个位置和它的大小是多少，又定义了如何被解释。通常协议被付与特定能力来解决特定问题。例如：超文本传输协议(HTTP)用来解决超文本对像在服务器间的传送、它们在哪存储和生成、浏览器使它们对用户可见。即时消息协议解决两个或更多的用户交换简要的文本信息的问题。

实现一个可用的网络需要解决大量的不同的问题。为了使事情可管理和模块化，不同的协议被设计来解决不同系列的问题。TCP/IP就是一个这样的方法集，又是被叫做协议栈。这恰好是一套在互联网上使用的协议集，但是它也可以被使用与单独的似有网络中。今后，当我们提及//network//，我们所指的是使用TCP/IP协议栈的任何网络。在TCP/IP协议栈中最主要的协议是网际协议(IP)，传输控制协议(TCP)和用户数据报协议(UDP)。

把协议分层被证明是很有用的；TCP/IP和几乎所有的协议栈都使用这种方式来组织。图1.1表示了协议、程序、Sockets API在主机和路由间的关系和数据从一个程序到另一个程序(使用TCP)间的流动。标有TCP和IP的盒子代表这些协议的实现。这些实现通常存在于主机操作系统的内部。程序通过Sockets API访问UDP和TCP提供的服务用虚线表示。箭头描述了数据留从应用程序，通过TCP和IP，到网络，在通过TCP和IP到达另一端。

  [resource/tcp_ip.jpg] 
  || [图1.1] A TCP/IP network | 

在TCP/IP协议中，最低的一层构成了基本的通信信道，例如：以太网或拨号上网的调制解调器连接。这些信到被网络层使用，网络层处理向目的地址转发数据包的问题(例如：选择那条路由)。网际协议是TCP/IP协议族中的单网络层--sigle-network--协议；它解决的问题是：使得在任何两个主机间的一系列信道和路由看起来好像是一条单独的主机到主机的信道。

网际协议提供了一个//数据包//协议：每一个数据包都被单独的处理和递送，和信件或包裹通过邮政系统一样。为了使它能够工作，每一个 IP 包都包含有目的地址，就如同你邮寄的每一个包裹都有某人的地址一样。尽管大多数的邮递公司担保包裹的递送，但是网际协议仅仅是一个尽最大努力的协议：它尝试递送每一个数据包，但是它也可以(偶尔这样)丢失，重排，或重复数据包在网络的传输过程中。

在IP层的上一层叫做//传输层//。它提供了可选的两种协议：TCP和UDP。它们都建立在IP曾所提供的服务上，但它们提供不同种类的传输服务，这些服务被不同需求的//应用层协议//所使用。TCP和UDP有一个相同的功能：寻址。回想一下IP协议递送数据包到主机的过程；很显然，把一个数据包传送到一个特定的应用程序，也许是在同一主机上使用网络的诸多程序中的一个，需要一个更出色颗粒度--granularity--的寻址技术。TCP和UDP都使用被叫做//端口号//的地址，来确定主机上的应用程序。TCP和UDP被叫做//端到端//的传输协议，因为它们运送数据总是从一个程序到拎一个程序(二I协议仅仅是把数据从一个主机运送到拎一个主机)。

TCP被设计用来检测和修复IP协议在主机到主机传输过程中所出现的包丢失，重复，和一些错误。TCP提供了一个//可靠的字节流//信道，因此应用程序不需要处理这些问题。它是一种//面向连接//的协议：在使用它通信之前，两个程序必须先建立一个TCP连接，这涉及到在两个通信计算机的TCP实现间完成一次//握手消息//的交换。使用TCP也和文件输入/输出(I/O)相似。实际上，一个文件被一个程序写和被另外一个读是一个通过TCP连接的合理的通信模型。另一方面，UDP并不尝试去恢复IP所产生的错误；它只是简单的扩展了IP协议的尽量交付的数据包服务，使得它可以工作在应用程序间而不是主机间。这样，使用UDP的应用程序就必须准备处理包丢失，包重排等等。

++ 关于地址 ++[address]

当你邮寄一封信，你要子表格中提供收信人的地址，这样邮政系统才会理解。在你通过电话和某人交谈之前，你必须给电话系统提供一个电话号码。同样，在一个程序和另一个程序通信之前，它必须告诉网络一些东西来识别另外的程序。在TCP/IP中，它使用两块信息来识别特定的程序：一个//网络地址//，被IP协议使用，和一个//端口号//，它是附加地址被传输协议(TCP活UDP)解释。

网络地址是二进制号码。它们有两种风格，对应着两种标准化的网际协议。最常见的是版本4(IPv4)；另一个是版本6(IPv6)，刚被开发出来。IPv4地址有32位长；因为它仅仅能够标识4十亿的不同目的地址，所以它不能应付今天的互联网。(它看起来似乎很多，但是因为它使用的地址分配方式，许多的地址都被浪费了。多余一半的IPv4地址都已近被分配完了。)就是这个原因，引进了IPv6。IPv6地址有128字节长。

+++ 书写 IP 地址 +++[writing]

为了以人性化的方式来描述网络地址(而不是在程序内部使用的方式)，两种IP使用不同的约定。IPv4地址惯常使用4组以句点分开的十进制数字表示(例如：10.1.2.3)；这被叫做//四点分//--dotted-quad--记法。在四点分字符串中的四个数字代表了网络地址中的4个字节的内容——这样，每一个数字都在0和255之间。

另一方面，16字节的IPv6地址通常被表示为十六进制的数字组，以冒号分割(例如：2000:fdb8:0000:0000:0001:00ab:853c:39a1)。每一数字代笔了两个字节的地址。；前面的0可以被忽略，因此前面所给的例子的第五和第六组可以被表示为:1:ab:。只包含0的组可以被完全忽略（二保留冒号以吧他们和其他的地址分开）。因此，上面的例子可以写为2000:fdb8::1:00ab:853c:39a1。

从技术上讲，每一个网络地址代表着一个主机和一个底层的信道见的连接——也就是，一个//网络接口//。一个主机有若干的接口；这种情况并不少见，例如，一个主机有有线（Ethernet）和无限（WiFi）网络。因为每一个这样的网络连接属于一个单独的主机，因此网络地址不仅要标识一个主机还标识它到网络的连接。然而，反之则不然，因为一个主机有许多的接口，而每个接口又有许多地址。（实际上，同一个接口可能有IPv4和IPv6两个地址。）

+++ 处理两种版本 +++[two_ver]

当本书的第一个版本写出来的时候，IPv6还没有被广泛的支持。今天，多数的系统都支持了IP6{{green 开箱}}--"out of the box"--。平滑的从IPv4过渡到IPv6，多数系统都是//双栈//，同时支持IPv4和IPv6。在这样的系统中，每一个网络接口（信道连接）都最少有一个IPv4地址和一个IPv6地址。

两个版本的IP的存在复杂化了socket程序员的生活。通常，当你要生成一个socket来通信的时候，你需要选择IPv4活IPv6作为底层协议。因此，你如何写一个程序在两个版本下都能工作呢？辛运的是，双栈系统通过支持两种协议和允许IPv6 sockets 与IPv4或IPv6 程序通信来处理两者见的相互操作。当然，IPv4和IPv6的地址非常不同；然而，使用//IPv4映射地址//，IPv4地址可以被映射到IPv6地址。一个IPv4映射
地址通过在四字节的IPv4地址钱加上 ::ffff 而得到。例如：132,3.23.7 的IPv4映射地址为 ::ffff:132.3.13.7。为了具有可读性，最后的四字节一般写为四点分记法。我们将会[第三章 #chap3]详细讨论协议的相互操作。

不幸的是，拥有IPv6网络地址不足一使你与互联网上的每个有IPv6的主机通讯。为了做到这一点，你还必须安排你的互联网服务提供商（ISP）来提供转发服务。

+++ 端口号 +++[port_num]

先前我们提到过要使用两部分地址来使一条消息传递到程序。在TCP活UDP中使用的//端口号//总是相对一个网络地址来解释。回到我们先前的类比，一个端口号对应一个房间号码，它在指定的街道地址里，也就是一个大的建筑。



||              RC 文件的位置             ||
|          Windows | ``%HOMEPATH%\_t2trc``
|  Linux and other | ``$HOME/.txt2tagsrc``
|     User defined | ``T2TCONFIG`` 环境变量
