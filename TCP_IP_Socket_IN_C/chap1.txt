
+ 第一章 简介 +[chap1-intro]

当今，人们使用计算机来打电话、看电视、给朋友发即时消息、与别人一起玩游戏而且可以购买你可以想象到的任何东西，无论是歌曲还是汽车--automobiles--。应用程序和互联网的通信能力使得这些成为可能。虽然 不能说现在有多少计算机能够连接到因特网，但是我们可以肯定这一数字将会增加很快；不需要多久就会到达数十亿。而且，新的应用程序与日俱增。随着渐增的带宽和访问--access--，在可预见的未来因特网的影响力讲持续增加。

一个应用程序如何与其它程序通信呢？本书的目的就是把你带到了解这个问题的道路上来，并且以//C//语言为背景。在很长的一段时间里，//C//语言被用来实现网络通信软件。确实，被称作 //Socket// 的应用程序接口(API)就是首先从//C//中发展来的。

在我们探究--delve--sockets的细节之前，去看一下网络和协议的一张大图是值得的，让我们看清我们的代码在那些地方适用。在这我们的目的不是教你网络和TCP/IP是如何工作的，而是介绍一些基本的知识和技术。

++ 网络、包和协议 ++

一个计算机网络是由通过信道互联的机器组成。我们把这些机器叫做 //hosts// 和 //routers//。主机(Hosts)就是那些运行应用程序的计算机，例如：你的浏览器、IM客户端，或者一个文件共享程序。这些运行在主机上的应用程序是网络的真正使用者。路由器(Routers)(也被叫做网关)是那些把信息从一个信道中继或转交给其它信道的机器。它们可能运行程序，担不是应用程序。对我们来说，//通信信道//是一种把字节流从一个主机传送到另一个主机的受
手段；它可能是有线的(如：Ethernet)，无线的(如：WiFi)，或者是其它的连接。

路由是非常重要的，因为它不是实际上把每个主机都连接到其它主机上，而是通过把一些主机连接到一个路由，这个路由又连接到其它路由，如此下去就形成了一个网络。这一安排使得每个机器都经过相对较少的通信信道；大多数的主机只需要一个。然而，程序间通过网络交换信息不需要直接与路由交互，而且一般也不知道路由的存在。

我们所说的//信息//是指连续的字节，它们被程序构造和解析。在计算机网络环境下，这些字节流一般被叫做//包//。一个数据包包含控制信息，网络用户使用它们来进行工作，而且有时还包括用户数据。一个例子就是确认包地址的信息，路由使用这一控制信息来确定如何转发每个包。

一个//协议//就是关于通信程序间数据包交换协议和它们的含义。协议既规定数据包如何构造，例如：目的信息在包的那个位置和它的大小是多少，又定义了如何被解释。通常协议被付与特定能力来解决特定问题。例如：超文本传输协议(HTTP)用来解决超文本对像在服务器间的传送、它们在哪存储和生成、浏览器使它们对用户可见。即时消息协议解决两个或更多的用户交换简要的文本信息的问题。

实现一个可用的网络需要解决大量的不同的问题。为了使事情可管理和模块化，不同的协议被设计来解决不同系列的问题。TCP/IP就是一个这样的方法集，又是被叫做协议栈。这恰好是一套在互联网上使用的协议集，但是它也可以被使用与单独的似有网络中。今后，当我们提及//network//，我们所指的是使用TCP/IP协议栈的任何网络。在TCP/IP协议栈中最主要的协议是网际协议(IP)，传输控制协议(TCP)和用户数据报协议(UDP)。

把协议分层被证明是很有用的；TCP/IP和几乎所有的协议栈都使用这种方式来组织。图1.1表示了协议、程序、Sockets API在主机和路由间的关系和数据从一个程序到另一个程序(使用TCP)间的流动。标有TCP和IP的盒子代表这些协议的实现。这些实现通常存在于主机操作系统的内部。程序通过Sockets API访问UDP和TCP提供的服务用虚线表示。箭头描述了数据留从应用程序，通过TCP和IP，到网络，在通过TCP和IP到达另一端。

  [resource/tcp_ip.jpg] 
  || [图1.1] A TCP/IP network | 

在TCP/IP协议中，最低的一层构成了基本的通信信道，例如：以太网或拨号上网的调制解调器连接。这些信到被网络层使用，网络层处理向目的地址转发数据包的问题(例如：选择那条路由)。网际协议是TCP/IP协议族中的单网络层--sigle-network--协议；它解决的问题是：使得在任何两个主机间的一系列信道和路由看起来好像是一条单独的主机到主机的信道。

网际协议提供了一个//数据包//协议：每一个数据包都被单独的处理和递送，和信件或包裹通过幼稚系统一样。

  ||  当然不需要！ |


||              RC 文件的位置             ||
|          Windows | ``%HOMEPATH%\_t2trc``
|  Linux and other | ``$HOME/.txt2tagsrc``
|     User defined | ``T2TCONFIG`` 环境变量
